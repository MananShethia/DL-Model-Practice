# -*- coding: utf-8 -*-
"""Digit Recognition Sole.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dzM5xSgvBy22Qcab7q6fZGE1y9hEV3l2
"""

from keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt

(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Shape of training dataset

X_train.shape

# To reshape X_train dataset i.e. to add gray scale (_, _, _, 1)

X_train = X_train.reshape((-1, 28, 28, 1))
# X_test = X_test.reshape((-1, 28, 28, 1))

# Display first element of training dataset
plt.imshow(X_train[0])
plt.show()

# Display first element with title of the image (in y_train)

plt.imshow(X_train[0])
plt.title(y_train[0])
plt.show()

# The image we got in previous cell is coloured which matplot do it

plt.imshow(X_train[0], cmap='gray')
plt.title(y_train[0])
plt.show()



# Creating Model

from keras.layers import Dense, Conv2D, AveragePooling2D, Flatten
from keras.models import Sequential

model = Sequential()

model.add(Conv2D(filters = 4, kernel_size = (5,5), activation = 'relu', input_shape = (28, 28, 1)))
model.add(AveragePooling2D(pool_size = (2,2)))

model.add(Conv2D(filters = 4, kernel_size = (7,7), activation = 'relu'))
model.add(AveragePooling2D(pool_size = (2,2)))

model.add(Flatten())
model.add(Dense(units = 10, activation = 'softmax'))

model.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'adam', metrics = ['acc'])

model.summary()

# Train Model

model.fit(X_train, y_train, epochs = 1, batch_size = 1)



# Test Model

plt.imshow(X_test[1])

test = X_test[1].reshape(-1, 28, 28, 1)
test.shape

img = model.predict(test)
plt.imshow(img)
plt.show()



# Save Model

model.save('/content/digit_recognition_board.h5')







