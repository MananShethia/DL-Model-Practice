# -*- coding: utf-8 -*-
"""Image Processing Basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZOW_s45q9-LwRW9QJggo4HxJVeqx4IMw
"""

import numpy as np
import pandas as pd
from skimage import io
import cv2 as cv
from google.colab.patches import cv2_imshow
import matplotlib.pylab as plt

# Load image from URL

img = io.imread("https://iiif.lib.ncsu.edu/iiif/0052574/full/800,/0/default.jpg")
img_2 = cv.cvtColor(img, cv.COLOR_BGR2RGB)
final_frame = cv.hconcat((img, img_2))
cv2_imshow(final_frame)

urls = ["https://iiif.lib.ncsu.edu/iiif/0052574/full/800,/0/default.jpg", 
        "https://iiif.lib.ncsu.edu/iiif/0016007/full/800,/0/default.jpg", 
        "https://placekitten.com/800/571"]

for url in urls:
  image = io.imread(url) 
  image_2 = cv.cvtColor(image, cv.COLOR_BGR2RGB)
  final_frame = cv.hconcat((image, image_2))
  cv2_imshow(final_frame)



# Image contours and histogram

img = io.imread("/content/images/puppy.jpg")
cv2_imshow(img)

# Check the image matrix data type
print(img.dtype)
# Check the height, width and number of channels of image 
print(img.shape)
# Check the height of image 
print(img.shape[0])
# Check the width of image 
print(img.shape[1])
# Check the number of channels of the image
print(img.shape[2])

# Histogram of color image and grayscale image

## Display the histogram of all the pixels in the color image
plt.hist(img.ravel(), bins = 256, range = [0,256]) 
plt.show()

## Display the histogram of R, G, B channel
color = ('r','g','b')
for i, colr in enumerate(color):
    histr = cv.calcHist([img],[i],None,[256],[0,256])
    plt.plot(histr,color = colr)
    plt.xlim([0,256])
plt.show()



# Convert image into gray scale

# normal image
img = io.imread("/content/color_wallpaper.jpeg")
print("Imported Image")
cv2_imshow(img)

# RGB Image
rgb_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
print("\nRGB Image")
cv2_imshow(rgb_img)

# Gray Image
gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
print("\nGRAY Image")
cv2_imshow(gray_img)

# Histogram of color and gray image

img = io.imread("/content/color_wallpaper.jpeg")
# cv2_imshow(img)
rgb_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
# cv2_imshow(gray_img)
print(rgb_img.shape)
print(gray_img.shape)


row_frame = max(rgb_img.shape[0], gray_img.shape[0])
col_frame = rgb_img.shape[1] + gray_img.shape[1]

final_frame = np.zeros(shape = (row_frame, col_frame, rgb_img.shape[2]), dtype = np.uint8)
final_frame[:rgb_img.shape[0], :rgb_img.shape[1]] = rgb_img
final_frame[:gray_img.shape[0], gray_img.shape[1]:] = gray_img[:, :, None]

cv2_show(final_frame)



# final_frame = cv.hconcat((rgb_img, gray_img))
# cv2_imshow(final_frame)



# plt.hist(img.ravel(), bins = 256, range = [0,256]) 
# img_hist = plt.show()





# Reading Multiple image image

img1 = cv.imread("/content/guitar.jpeg")
img2 = cv.imread("/content/guitar 2.jpeg")
img3 = cv.imread("/content/guitar 3.jpeg")
img4 = cv.imread("/content/guitar 4.jpeg")

cv2_imshow(img1)
cv2_imshow(img2)
cv2_imshow(img3)
cv2_imshow(img4)

# Writing image

# BGR image
img = io.imread("/content/guitar.jpeg")

# Store in working directory
cv.imwrite("bgr_guitar.jpg", img)







